<div class="container-fluid">
    <div class="row">
        <!-- Toolbar -->
        <div class="col-12 bg-dark text-white py-2">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <a href="/dashboards" class="btn btn-sm btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back
                    </a>
                    <span class="mx-3" id="dashboardTitle">Dashboard Editor</span>
                </div>
                <div>
                    <button id="saveBtn" class="btn btn-sm btn-success">
                        <i class="fas fa-save"></i> Save
                    </button>
                    <button id="previewBtn" class="btn btn-sm btn-info">
                        <i class="fas fa-eye"></i> Preview
                    </button>
                    <button id="settingsBtn" class="btn btn-sm btn-warning">
                        <i class="fas fa-cog"></i> Settings
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="height: calc(100vh - 60px);">
        <!-- Widget Panel -->
        <div class="col-md-2 bg-light border-right p-3" style="overflow-y: auto;">
            <h6>Widgets</h6>
            <div class="widget-palette">
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="speedometer">
                    <i class="fas fa-tachometer-alt"></i> Speedometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="tachometer">
                    <i class="fas fa-tachometer-alt"></i> Tachometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="circular-gauge">
                    <i class="fas fa-circle-notch"></i> Circular Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="linear-gauge">
                    <i class="fas fa-sliders-h"></i> Linear Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="temperature">
                    <i class="fas fa-thermometer-half"></i> Temperature
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="digital-display">
                    <i class="fas fa-digital-tachograph"></i> Digital Display
                </button>
                <button class="btn btn-block btn-sm btn-outline-warning mb-2" data-widget="indicator-light">
                    <i class="fas fa-lightbulb"></i> Indicator Light
                </button>
            </div>

            <hr>

            <h6 class="mt-3">Sessions</h6>
            <select id="sessionSelect" class="form-control form-control-sm">
                <option value="">Select session...</option>
            </select>
            <button id="startLiveBtn" class="btn btn-block btn-sm btn-success mt-2" disabled>
                <i class="fas fa-play"></i> Start Live
            </button>
        </div>

        <!-- Canvas Area -->
        <div class="col-md-7 p-0" style="overflow: auto; background: #2a2a2a;">
            <div class="canvas-container" style="display: inline-block;">
                <canvas id="dashboardCanvas"></canvas>
            </div>
        </div>

        <!-- Properties Panel -->
        <div class="col-md-3 bg-light border-left p-3" style="overflow-y: auto;">
            <h6>Properties</h6>
            <div id="propertiesPanel">
                <p class="text-muted">Select a widget to edit properties</p>
            </div>
        </div>
    </div>
</div>

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Dashboard Settings</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="form-control" id="settingsName">
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea class="form-control" id="settingsDescription" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>Background Color</label>
                    <input type="color" class="form-control" id="settingsBackgroundColor">
                </div>
                <div class="form-group">
                    <label>Grid Size</label>
                    <input type="number" class="form-control" id="settingsGridSize" min="10" max="50">
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsShowGrid">
                    <label class="form-check-label" for="settingsShowGrid">Show Grid</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsSnapToGrid">
                    <label class="form-check-label" for="settingsSnapToGrid">Snap to Grid</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSettings">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="/js/lib/jquery-3.3.1.min.js"></script>
<script src="/js/lib/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/widgets.js"></script>
<script src="/js/dashboard-editor.js"></script>

<script>
const dashboardId = '{{dashboardId}}';
let editor;
let currentDashboard = null;
let liveSession = null;

$(document).ready(function() {
    // Initialize editor
    editor = new DashboardEditor('dashboardCanvas', {
        showGrid: true,
        snapToGrid: true
    });

    // Load dashboard if editing existing
    if (dashboardId !== 'new') {
        loadDashboard();
    }

    // Load sessions list
    loadSessions();

    // Widget palette
    $('.widget-palette button').click(function() {
        const widgetType = $(this).data('widget');
        editor.addWidget(widgetType);
    });

    // Save button
    $('#saveBtn').click(function() {
        saveDashboard();
    });

    // Settings button
    $('#settingsBtn').click(function() {
        openSettings();
    });

    // Preview button
    $('#previewBtn').click(function() {
        if (dashboardId !== 'new') {
            window.open(`/dashboard/view/${dashboardId}`, '_blank');
        } else {
            alert('Please save the dashboard first');
        }
    });

    // Session select
    $('#sessionSelect').change(function() {
        const sessionId = $(this).val();
        $('#startLiveBtn').prop('disabled', !sessionId);
    });

    // Start live button
    $('#startLiveBtn').click(function() {
        const sessionId = $('#sessionSelect').val();
        if (sessionId) {
            startLivePreview(sessionId);
        }
    });

    // Save settings
    $('#saveSettings').click(function() {
        const newSettings = {
            backgroundColor: $('#settingsBackgroundColor').val(),
            gridSize: parseInt($('#settingsGridSize').val()),
            showGrid: $('#settingsShowGrid').is(':checked'),
            snapToGrid: $('#settingsSnapToGrid').is(':checked')
        };
        
        editor.config = { ...editor.config, ...newSettings };
        editor.render();
        $('#settingsModal').modal('hide');
    });

    // Widget properties event
    document.addEventListener('widget-properties', function(e) {
        showWidgetProperties(e.detail.widget);
    });

    function loadDashboard() {
        $.ajax({
            url: `/api/dashboards/${dashboardId}`,
            method: 'GET',
            success: function(dashboard) {
                currentDashboard = dashboard;
                $('#dashboardTitle').text(dashboard.name);
                editor.loadConfig(dashboard.config);
            },
            error: function(err) {
                console.error('Failed to load dashboard:', err);
                alert('Failed to load dashboard');
            }
        });
    }

    function saveDashboard() {
        const config = editor.getConfig();
        const name = $('#settingsName').val() || currentDashboard?.name || 'Unnamed Dashboard';
        const description = $('#settingsDescription').val() || currentDashboard?.description || '';

        const data = {
            name: name,
            description: description,
            config: config
        };

        if (dashboardId === 'new') {
            // Create new
            $.ajax({
                url: '/api/dashboards',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(dashboard) {
                    alert('Dashboard created successfully');
                    window.location.href = `/dashboard/editor/${dashboard.id}`;
                },
                error: function(err) {
                    console.error('Failed to create dashboard:', err);
                    alert('Failed to create dashboard');
                }
            });
        } else {
            // Update existing
            $.ajax({
                url: `/api/dashboards/${dashboardId}`,
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function() {
                    alert('Dashboard saved successfully');
                },
                error: function(err) {
                    console.error('Failed to save dashboard:', err);
                    alert('Failed to save dashboard');
                }
            });
        }
    }

    function loadSessions() {
        $.ajax({
            url: '/api/sessions',
            method: 'GET',
            success: function(sessions) {
                const select = $('#sessionSelect');
                sessions.forEach(session => {
                    select.append(`<option value="${session.sessionId}">${session.name}</option>`);
                });
            }
        });
    }

    function startLivePreview(sessionId) {
        // Connect WebSocket and update widgets in real-time
        const socket = io();
        socket.emit('join-session', sessionId);
        socket.on('sensor-data', function(data) {
            if (data.values) {
                Object.keys(data.values).forEach(key => {
                    const value = parseFloat(data.values[key]);
                    if (!isNaN(value)) {
                        editor.updateWidgetBySensor(key, value);
                    }
                });
            }
        });
        liveSession = socket;
        $('#startLiveBtn').text('Stop Live').removeClass('btn-success').addClass('btn-danger');
        $('#startLiveBtn').off('click').click(function() {
            if (liveSession) {
                liveSession.disconnect();
                liveSession = null;
            }
            $('#startLiveBtn').text('Start Live').removeClass('btn-danger').addClass('btn-success');
            $('#startLiveBtn').off('click');
            $('#startLiveBtn').click(function() {
                startLivePreview($('#sessionSelect').val());
            });
        });
    }

    function openSettings() {
        $('#settingsName').val(currentDashboard?.name || '');
        $('#settingsDescription').val(currentDashboard?.description || '');
        $('#settingsBackgroundColor').val(editor.config.backgroundColor);
        $('#settingsGridSize').val(editor.config.gridSize);
        $('#settingsShowGrid').prop('checked', editor.config.showGrid);
        $('#settingsSnapToGrid').prop('checked', editor.config.snapToGrid);
        $('#settingsModal').modal('show');
    }

    function showWidgetProperties(widget) {
        const panel = $('#propertiesPanel');
        panel.empty();

        panel.append(`<h6>Widget: ${widget.type}</h6>`);
        
        // Sensor mapping
        panel.append(`
            <div class="form-group">
                <label>Sensor</label>
                <select class="form-control form-control-sm widget-sensor">
                    <option value="">Select sensor...</option>
                    <option value="kc" ${widget.sensorKey === 'kc' ? 'selected' : ''}>Engine RPM</option>
                    <option value="kd" ${widget.sensorKey === 'kd' ? 'selected' : ''}>Speed (OBD)</option>
                    <option value="kff1001" ${widget.sensorKey === 'kff1001' ? 'selected' : ''}>Speed (GPS)</option>
                    <option value="k5" ${widget.sensorKey === 'k5' ? 'selected' : ''}>Coolant Temp</option>
                    <option value="kf" ${widget.sensorKey === 'kf' ? 'selected' : ''}>Intake Air Temp</option>
                    <option value="kb" ${widget.sensorKey === 'kb' ? 'selected' : ''}>Manifold Pressure</option>
                    <option value="k4" ${widget.sensorKey === 'k4' ? 'selected' : ''}>Engine Load</option>
                    <option value="k10" ${widget.sensorKey === 'k10' ? 'selected' : ''}>MAF Rate</option>
                    <option value="k2f" ${widget.sensorKey === 'k2f' ? 'selected' : ''}>Fuel Level</option>
                    <option value="kff1225" ${widget.sensorKey === 'kff1225' ? 'selected' : ''}>Torque</option>
                    <option value="kff1226" ${widget.sensorKey === 'kff1226' ? 'selected' : ''}>Horsepower</option>
                </select>
            </div>
        `);

        $('.widget-sensor').change(function() {
            widget.sensorKey = $(this).val();
        });

        // Common properties
        if (widget.instance && widget.instance.config) {
            const config = widget.instance.config;
            
            panel.append(`
                <div class="form-group">
                    <label>Label</label>
                    <input type="text" class="form-control form-control-sm" value="${config.label || ''}" id="prop-label">
                </div>
                <div class="form-group">
                    <label>Unit</label>
                    <input type="text" class="form-control form-control-sm" value="${config.unit || ''}" id="prop-unit">
                </div>
                <div class="form-group">
                    <label>Min Value</label>
                    <input type="number" class="form-control form-control-sm" value="${config.minValue || 0}" id="prop-min">
                </div>
                <div class="form-group">
                    <label>Max Value</label>
                    <input type="number" class="form-control form-control-sm" value="${config.maxValue || 100}" id="prop-max">
                </div>
                <div class="form-group">
                    <label>Primary Color</label>
                    <input type="color" class="form-control form-control-sm" value="${config.primaryColor || '#00ff00'}" id="prop-color">
                </div>
            `);

            // Images section
            panel.append(`<hr><h6>Images</h6>`);
            panel.append(`
                <div class="form-group">
                    <label>Background Image</label>
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control form-control-sm" value="${config.backgroundImageUrl || ''}" id="prop-bg-image" placeholder="URL or upload...">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary btn-sm" type="button" id="upload-bg-btn" title="Upload Image">
                                <i class="fas fa-upload"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" type="button" id="browse-bg-btn" title="Browse Uploaded">
                                <i class="fas fa-images"></i>
                            </button>
                        </div>
                    </div>
                    <input type="file" id="bg-file-input" accept="image/*" style="display: none;">
                </div>
                <div class="form-group">
                    <label>Background Opacity</label>
                    <input type="range" class="form-control-range" min="0" max="1" step="0.1" value="${config.backgroundOpacity || 0.5}" id="prop-bg-opacity">
                    <small class="text-muted">Value: <span id="bg-opacity-value">${config.backgroundOpacity || 0.5}</span></small>
                </div>
                <div class="form-group">
                    <label>Foreground Image (for dual mode)</label>
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control form-control-sm" value="${config.foregroundImageUrl || ''}" id="prop-fg-image" placeholder="URL or upload...">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary btn-sm" type="button" id="upload-fg-btn" title="Upload Image">
                                <i class="fas fa-upload"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" type="button" id="browse-fg-btn" title="Browse Uploaded">
                                <i class="fas fa-images"></i>
                            </button>
                        </div>
                    </div>
                    <input type="file" id="fg-file-input" accept="image/*" style="display: none;">
                </div>
                <div class="form-group">
                    <label>Image Mode</label>
                    <select class="form-control form-control-sm" id="prop-image-mode">
                        <option value="background" ${config.imageMode === 'background' ? 'selected' : ''}>Background Only</option>
                        <option value="dual" ${config.imageMode === 'dual' ? 'selected' : ''}>Dual (BG + FG fills with value)</option>
                    </select>
                </div>
            `);

            // Smoothing & Delay section
            panel.append(`<hr><h6>Animation</h6>`);
            panel.append(`
                <div class="form-group">
                    <label>Smoothing</label>
                    <input type="range" class="form-control-range" min="0" max="1" step="0.1" value="${config.smoothing || 0.2}" id="prop-smoothing">
                    <small class="text-muted">Value: <span id="smoothing-value">${config.smoothing || 0.2}</span> (0=instant, 1=very smooth)</small>
                </div>
                <div class="form-group">
                    <label>Update Delay (ms)</label>
                    <input type="number" class="form-control form-control-sm" min="0" max="5000" step="100" value="${config.updateDelay || 0}" id="prop-delay">
                </div>
            `);

            // Indicator Light specific properties
            if (widget.type === 'indicator-light') {
                panel.append(`<hr><h6>Indicator Settings</h6>`);
                panel.append(`
                    <div class="form-group">
                        <label>Shape</label>
                        <select class="form-control form-control-sm" id="prop-shape">
                            <option value="circle" ${config.shape === 'circle' ? 'selected' : ''}>Circle</option>
                            <option value="square" ${config.shape === 'square' ? 'selected' : ''}>Square</option>
                            <option value="triangle" ${config.shape === 'triangle' ? 'selected' : ''}>Triangle</option>
                            <option value="icon" ${config.shape === 'icon' ? 'selected' : ''}>Icon (Custom Image)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Icon URL (if shape=icon)</label>
                        <input type="text" class="form-control form-control-sm" value="${config.iconUrl || ''}" id="prop-icon-url" placeholder="https://...">
                    </div>
                    <div class="form-group">
                        <label>On Color</label>
                        <input type="color" class="form-control form-control-sm" value="${config.onColor || '#ff0000'}" id="prop-on-color">
                    </div>
                    <div class="form-group">
                        <label>Off Color</label>
                        <input type="color" class="form-control form-control-sm" value="${config.offColor || '#333333'}" id="prop-off-color">
                    </div>
                    <div class="form-group">
                        <label>Condition Type</label>
                        <select class="form-control form-control-sm" id="prop-condition-type">
                            <option value="threshold" ${config.conditionType === 'threshold' ? 'selected' : ''}>Threshold</option>
                            <option value="range" ${config.conditionType === 'range' ? 'selected' : ''}>Range</option>
                            <option value="always" ${config.conditionType === 'always' ? 'selected' : ''}>Always On</option>
                        </select>
                    </div>
                    <div class="form-group" id="threshold-settings">
                        <label>Threshold Operator</label>
                        <select class="form-control form-control-sm" id="prop-threshold-op">
                            <option value="<" ${config.thresholdOperator === '<' ? 'selected' : ''}>&lt; Less Than</option>
                            <option value=">" ${config.thresholdOperator === '>' ? 'selected' : ''}>&gt; Greater Than</option>
                            <option value="<=" ${config.thresholdOperator === '<=' ? 'selected' : ''}>&lt;= Less or Equal</option>
                            <option value=">=" ${config.thresholdOperator === '>=' ? 'selected' : ''}>&gt;= Greater or Equal</option>
                            <option value="==" ${config.thresholdOperator === '==' ? 'selected' : ''}>== Equal</option>
                            <option value="!=" ${config.thresholdOperator === '!=' ? 'selected' : ''}>!= Not Equal</option>
                        </select>
                        <label class="mt-2">Threshold Value</label>
                        <input type="number" class="form-control form-control-sm" value="${config.thresholdValue || 50}" id="prop-threshold-value">
                    </div>
                    <div class="form-group">
                        <label>Blink Pattern</label>
                        <select class="form-control form-control-sm" id="prop-blink-pattern">
                            <option value="steady" ${config.blinkPattern === 'steady' ? 'selected' : ''}>Steady</option>
                            <option value="blink" ${config.blinkPattern === 'blink' ? 'selected' : ''}>Blink</option>
                            <option value="fast-blink" ${config.blinkPattern === 'fast-blink' ? 'selected' : ''}>Fast Blink</option>
                            <option value="pulse" ${config.blinkPattern === 'pulse' ? 'selected' : ''}>Pulse</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Blink Speed (ms)</label>
                        <input type="number" class="form-control form-control-sm" value="${config.blinkSpeed || 500}" id="prop-blink-speed">
                    </div>
                `);
            }

            // Update handlers
            $('#prop-label').on('input', function() {
                widget.instance.updateConfig({ label: $(this).val() });
                editor.render();
            });

            $('#prop-unit').on('input', function() {
                widget.instance.updateConfig({ unit: $(this).val() });
                editor.render();
            });

            $('#prop-min').on('input', function() {
                widget.instance.updateConfig({ minValue: parseFloat($(this).val()) });
                editor.render();
            });

            $('#prop-max').on('input', function() {
                widget.instance.updateConfig({ maxValue: parseFloat($(this).val()) });
                editor.render();
            });

            $('#prop-color').on('input', function() {
                widget.instance.updateConfig({ primaryColor: $(this).val() });
                editor.render();
            });

            // Image handlers
            $('#prop-bg-image').on('change', function() {
                widget.instance.updateConfig({ backgroundImageUrl: $(this).val() });
                editor.render();
            });

            $('#prop-bg-opacity').on('input', function() {
                const val = parseFloat($(this).val());
                $('#bg-opacity-value').text(val);
                widget.instance.updateConfig({ backgroundOpacity: val });
                editor.render();
            });

            $('#prop-fg-image').on('change', function() {
                widget.instance.updateConfig({ foregroundImageUrl: $(this).val() });
                editor.render();
            });

            $('#prop-image-mode').on('change', function() {
                widget.instance.updateConfig({ imageMode: $(this).val() });
                editor.render();
            });

            // Image upload handlers
            $('#upload-bg-btn').click(() => $('#bg-file-input').click());
            $('#upload-fg-btn').click(() => $('#fg-file-input').click());

            $('#bg-file-input').on('change', function(e) {
                if (this.files && this.files[0]) {
                    uploadImage(this.files[0], (url) => {
                        $('#prop-bg-image').val(url).trigger('change');
                    });
                }
            });

            $('#fg-file-input').on('change', function(e) {
                if (this.files && this.files[0]) {
                    uploadImage(this.files[0], (url) => {
                        $('#prop-fg-image').val(url).trigger('change');
                    });
                }
            });

            // Browse uploaded images
            $('#browse-bg-btn').click(() => {
                browseImages((url) => {
                    $('#prop-bg-image').val(url).trigger('change');
                });
            });

            $('#browse-fg-btn').click(() => {
                browseImages((url) => {
                    $('#prop-fg-image').val(url).trigger('change');
                });
            });

            // Animation handlers
            $('#prop-smoothing').on('input', function() {
                const val = parseFloat($(this).val());
                $('#smoothing-value').text(val);
                widget.instance.updateConfig({ smoothing: val });
            });

            $('#prop-delay').on('input', function() {
                widget.instance.updateConfig({ updateDelay: parseInt($(this).val()) });
            });

            // Indicator Light handlers
            if (widget.type === 'indicator-light') {
                $('#prop-shape').on('change', function() {
                    widget.instance.updateConfig({ shape: $(this).val() });
                    editor.render();
                });

                $('#prop-icon-url').on('change', function() {
                    widget.instance.updateConfig({ iconUrl: $(this).val() });
                    editor.render();
                });

                $('#prop-on-color').on('input', function() {
                    widget.instance.updateConfig({ onColor: $(this).val() });
                    editor.render();
                });

                $('#prop-off-color').on('input', function() {
                    widget.instance.updateConfig({ offColor: $(this).val() });
                    editor.render();
                });

                $('#prop-condition-type').on('change', function() {
                    widget.instance.updateConfig({ conditionType: $(this).val() });
                    editor.render();
                });

                $('#prop-threshold-op').on('change', function() {
                    widget.instance.updateConfig({ thresholdOperator: $(this).val() });
                    editor.render();
                });

                $('#prop-threshold-value').on('input', function() {
                    widget.instance.updateConfig({ thresholdValue: parseFloat($(this).val()) });
                    editor.render();
                });

                $('#prop-blink-pattern').on('change', function() {
                    widget.instance.updateConfig({ blinkPattern: $(this).val() });
                    editor.render();
                });

                $('#prop-blink-speed').on('input', function() {
                    widget.instance.updateConfig({ blinkSpeed: parseInt($(this).val()) });
                    editor.render();
                });
            }
        }
    }

    // Upload image function
    function uploadImage(file, callback) {
        const formData = new FormData();
        formData.append('image', file);

        $.ajax({
            url: '/api/upload-image',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            xhr: function() {
                const xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        console.log('Upload progress:', percentComplete + '%');
                    }
                }, false);
                return xhr;
            },
            success: function(response) {
                if (response.success) {
                    alert('Image uploaded successfully!');
                    callback(response.url);
                }
            },
            error: function(err) {
                console.error('Upload failed:', err);
                alert('Failed to upload image');
            }
        });
    }

    // Browse uploaded images
    function browseImages(callback) {
        $.ajax({
            url: '/api/images',
            method: 'GET',
            success: function(response) {
                if (response.images && response.images.length > 0) {
                    showImageBrowser(response.images, callback);
                } else {
                    alert('No uploaded images found. Upload an image first.');
                }
            },
            error: function(err) {
                console.error('Failed to load images:', err);
                alert('Failed to load images');
            }
        });
    }

    // Show image browser modal
    function showImageBrowser(images, callback) {
        const modal = $(`
            <div class="modal fade" id="imageBrowserModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Image</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row" id="imageGrid"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        `);

        const grid = modal.find('#imageGrid');
        images.forEach(img => {
            const col = $(`
                <div class="col-md-3 mb-3">
                    <div class="card image-card" data-url="${img.url}" style="cursor: pointer;">
                        <img src="${img.url}" class="card-img-top" style="height: 150px; object-fit: cover;">
                        <div class="card-body p-2">
                            <small class="text-muted">${img.filename}</small>
                        </div>
                    </div>
                </div>
            `);
            grid.append(col);
        });

        modal.find('.image-card').click(function() {
            const url = $(this).data('url');
            callback(url);
            modal.modal('hide');
        });

        $('body').append(modal);
        modal.modal('show');
        modal.on('hidden.bs.modal', function() {
            $(this).remove();
        });
    }
});
</script>

<style>
body {
    overflow: hidden;
}

.canvas-container {
    position: relative;
}

#dashboardCanvas {
    border: 2px solid #333;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
}

.widget-palette button {
    text-align: left;
}
</style>


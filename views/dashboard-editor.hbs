<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Editor - Torque Dash</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/css/lib/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/css/lib/fontawesome.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/style.css">
    
    <!-- Leaflet CSS for GPS Map Widget -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
</head>
<body>

<!-- Standard Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary d-flex">
    <div class="p-2">
        <button type="button" id="sidebarCollapse" class="btn">
            <i class="fas fa-bars"></i>
        </button>
    </div>
    <div class="navbar-brand mr-auto p-2">
        <a class="navbar-brand" href="/">torque<b>DASH</b></a>
    </div>
    <div class="p-2">
        <span class="text-white mr-3">Dashboard Editor</span>
        <button id="saveBtn" class="btn btn-sm btn-success mr-2">
            <i class="fas fa-save"></i> Save
        </button>
        <button id="previewBtn" class="btn btn-sm btn-info mr-2">
            <i class="fas fa-eye"></i> Preview
        </button>
        <button id="settingsBtn" class="btn btn-sm btn-warning mr-2">
            <i class="fas fa-cog"></i> Settings
        </button>
    </div>
    <div class="p-2">
        <div class="dropdown">
            <a class="btn dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="d-none d-sm-inline">{{userEmail}}</span>
                <span>&nbsp;</span>
                <i class="fas fa-user-circle"></i>
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" href="/api/users/logout"><i class="fas fa-sign-out-alt"></i> &nbsp; Logout</a>
            </div>
        </div>
    </div>
</nav>

<!-- Sidebar (collapsible) -->
<div id="sidebar" class="sidebar">
    {{> sidebar}}
</div>

<div class="container-fluid p-0">
    <div class="row" style="height: calc(100vh - 60px); margin: 0;">
        <!-- Widget Panel -->
        <div class="col-md-2 bg-light border-right p-3" style="overflow-y: auto;">
            <h6>Widgets</h6>
            <div class="widget-palette">
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="speedometer">
                    <i class="fas fa-tachometer-alt"></i> Speedometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="tachometer">
                    <i class="fas fa-tachometer-alt"></i> Tachometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="circular-gauge">
                    <i class="fas fa-circle-notch"></i> Circular Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="linear-gauge">
                    <i class="fas fa-sliders-h"></i> Linear Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="temperature">
                    <i class="fas fa-thermometer-half"></i> Temperature
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="digital-display">
                    <i class="fas fa-digital-tachograph"></i> Digital Display
                </button>
                <button class="btn btn-block btn-sm btn-outline-warning mb-2" data-widget="indicator-light">
                    <i class="fas fa-lightbulb"></i> Indicator Light
                </button>
                <button class="btn btn-block btn-sm btn-outline-success mb-2" data-widget="gps-map">
                    <i class="fas fa-map-marked-alt"></i> GPS Map
                </button>
            </div>

            <hr>

            <h6 class="mt-3">Sessions</h6>
            <select id="sessionSelect" class="form-control form-control-sm">
                <option value="">Select session...</option>
            </select>
            <button id="startLiveBtn" class="btn btn-block btn-sm btn-success mt-2" disabled>
                <i class="fas fa-play"></i> Start Live
            </button>
        </div>

        <!-- Canvas Area -->
        <div class="col-md-7 p-0 canvas-scroll-wrapper">
            <div class="canvas-scrollable">
                <div class="canvas-container">
                    <canvas id="dashboardCanvas"></canvas>
                </div>
            </div>
        </div>

        <!-- Properties Panel -->
        <div class="col-md-3 bg-light border-left p-3 properties-panel">
            <h6 class="sticky-top bg-light pb-2 mb-2 border-bottom">Properties</h6>
            <div id="propertiesPanel" class="properties-content">
                <p class="text-muted">Select a widget to edit properties</p>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-xl" style="max-width: 95%;">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title"><i class="fas fa-eye mr-2"></i>Dashboard Preview</h5>
                <button type="button" class="close text-white" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body text-center p-0" style="background: #2a2a2a; min-height: 500px;">
                <canvas id="previewCanvas" style="box-shadow: 0 0 20px rgba(0,0,0,0.5);"></canvas>
            </div>
            <div class="modal-footer bg-dark">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Dashboard Settings</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="form-control" id="settingsName">
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea class="form-control" id="settingsDescription" rows="3"></textarea>
                </div>
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="settingsTransparentBg">
                    <label class="form-check-label" for="settingsTransparentBg">
                        <i class="fas fa-eye-slash mr-1"></i>Transparent Background (no color, only image)
                    </label>
                </div>
                
                <div class="form-group" id="bgColorGroup">
                    <label>Background Color</label>
                    <input type="color" class="form-control" id="settingsBackgroundColor">
                </div>
                <div class="form-group">
                    <label><i class="fas fa-image mr-2"></i>Background Image</label>
                    <div class="input-group input-group-sm mb-2">
                        <input type="text" class="form-control" id="settingsBackgroundImage" placeholder="URL or path to image">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" onclick="uploadDashboardImage()">
                                <i class="fas fa-upload"></i>
                            </button>
                            <button class="btn btn-outline-info" type="button" onclick="browseDashboardImages()">
                                <i class="fas fa-folder-open"></i>
                            </button>
                        </div>
                    </div>
                    <small class="text-muted">Recommended: 1920x1080px. Leave empty for solid color.</small>
                </div>
                <div class="form-group">
                    <label>Background Image Opacity</label>
                    <input type="range" class="custom-range" id="settingsBackgroundOpacity" min="0" max="1" step="0.1" value="1">
                    <small class="text-muted">Opacity: <span id="bgOpacityValue">1.0</span></small>
                </div>
                <div class="form-group">
                    <label>Grid Size</label>
                    <input type="number" class="form-control" id="settingsGridSize" min="10" max="50">
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsShowGrid">
                    <label class="form-check-label" for="settingsShowGrid">Show Grid</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsSnapToGrid">
                    <label class="form-check-label" for="settingsSnapToGrid">Snap to Grid</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSettings">Save</button>
            </div>
        </div>
    </div>
</div>

<style>
/* Custom Scrollbar for Properties Panel */
.properties-panel {
    overflow-y: auto !important;
    max-height: calc(100vh - 60px);
}

.properties-content {
    overflow-y: visible !important;
    padding-bottom: 80px; /* Space for bottom button */
}

/* Visible Scrollbar */
.properties-panel::-webkit-scrollbar {
    width: 12px;
}

.properties-panel::-webkit-scrollbar-track {
    background: #e9ecef;
    border-radius: 6px;
}

.properties-panel::-webkit-scrollbar-thumb {
    background: #6c757d;
    border-radius: 6px;
}

.properties-panel::-webkit-scrollbar-thumb:hover {
    background: #495057;
}

/* Firefox Scrollbar */
.properties-panel {
    scrollbar-width: auto;
    scrollbar-color: #6c757d #e9ecef;
}

/* Button Contrast Fix */
.btn-outline-primary {
    color: #007bff !important;
    border-color: #007bff !important;
    background-color: white !important;
}

.btn-outline-primary:hover {
    color: white !important;
    background-color: #007bff !important;
}

.btn-outline-success {
    color: #28a745 !important;
    border-color: #28a745 !important;
    background-color: white !important;
}

.btn-outline-warning {
    color: #856404 !important;
    border-color: #ffc107 !important;
    background-color: white !important;
}

/* Sidebar */
.sidebar {
    position: fixed;
    top: 56px;
    left: -250px;
    width: 250px;
    height: calc(100vh - 56px);
    background: #343a40;
    transition: left 0.3s ease;
    z-index: 1000;
    overflow-y: auto;
}

.sidebar.show {
    left: 0;
}

.sidebar::-webkit-scrollbar {
    width: 8px;
}

.sidebar::-webkit-scrollbar-thumb {
    background: #6c757d;
    border-radius: 4px;
}

/* Overlay when sidebar is open */
.sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    display: none;
}

.sidebar-overlay.show {
    display: block;
}

/* Properties Panel Bottom Padding */
#propertiesPanel > *:last-child {
    margin-bottom: 20px !important;
}

/* Delete Button Fixed */
#delete-widget-btn {
    margin-top: 10px;
    margin-bottom: 20px;
}
</style>

<div class="sidebar-overlay" id="sidebarOverlay"></div>

<script src="/js/lib/jquery-3.3.1.min.js"></script>
<script src="/js/lib/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js" integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg==" crossorigin=""></script>
<script src="/js/widgets.js"></script>
<script src="/js/dashboard-editor.js"></script>
<script src="/js/widget-properties-ui.js"></script>
<script src="/js/widget-properties-handlers.js"></script>

<script>
// Sidebar Toggle (using standard sidebarCollapse button)
$('#sidebarCollapse').on('click', function() {
    $('#sidebar').toggleClass('show');
    $('#sidebarOverlay').toggleClass('show');
});

$('#sidebarOverlay').on('click', function() {
    $('#sidebar').removeClass('show');
    $('#sidebarOverlay').removeClass('show');
});
</script>

<script>
const dashboardId = '{{dashboardId}}';
let editor;
let currentDashboard = null;
let liveSession = null;

$(document).ready(function() {
    // Initialize editor
    editor = new DashboardEditor('dashboardCanvas', {
        showGrid: true,
        snapToGrid: true
    });

    // Load dashboard if editing existing
    if (dashboardId !== 'new') {
        loadDashboard();
    }

    // Load sessions list
    loadSessions();

    // Widget palette
    $('.widget-palette button').click(function() {
        const widgetType = $(this).data('widget');
        editor.addWidget(widgetType);
    });

    // Save button
    $('#saveBtn').click(function() {
        saveDashboard();
    });

    // Settings button
    $('#settingsBtn').click(function() {
        openSettings();
    });

    // Preview button
    let previewViewer = null;
    $('#previewBtn').click(function() {
        // Show preview modal
        $('#previewModal').modal('show');
        
        // Initialize preview viewer after modal is shown
        $('#previewModal').on('shown.bs.modal', function() {
            if (!previewViewer) {
                const canvas = document.getElementById('previewCanvas');
                const config = editor.config;
                
                // Set canvas size
                canvas.width = config.width || 1920;
                canvas.height = config.height || 1080;
                
                // Create preview viewer instance
                previewViewer = {
                    canvas: canvas,
                    ctx: canvas.getContext('2d'),
                    widgets: []
                };
            }
            
            // Render widgets in preview
            renderPreview();
        });
        
        // Clean up on modal close
        $('#previewModal').on('hidden.bs.modal', function() {
            if (previewViewer) {
                previewViewer = null;
            }
        });
    });
    
    function renderPreview() {
        if (!previewViewer) return;
        
        const ctx = previewViewer.ctx;
        const canvas = previewViewer.canvas;
        
        // Clear canvas
        ctx.fillStyle = editor.config.backgroundColor || '#1a1a1a';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Render each widget
        editor.widgets.forEach(widget => {
            if (widget.instance) {
                // Save context
                ctx.save();
                
                // Apply rotation if set
                if (widget.rotation) {
                    const cx = widget.x + widget.width / 2;
                    const cy = widget.y + widget.height / 2;
                    ctx.translate(cx, cy);
                    ctx.rotate(widget.rotation * Math.PI / 180);
                    ctx.drawImage(widget.canvas, -widget.width / 2, -widget.height / 2);
                } else {
                    ctx.drawImage(widget.canvas, widget.x, widget.y);
                }
                
                ctx.restore();
            }
        });
    }

    // Session select
    $('#sessionSelect').change(function() {
        const sessionId = $(this).val();
        $('#startLiveBtn').prop('disabled', !sessionId);
    });

    // Start live button
    $('#startLiveBtn').click(function() {
        const sessionId = $('#sessionSelect').val();
        if (sessionId) {
            startLivePreview(sessionId);
        }
    });

    // Save settings
    $('#saveSettings').click(function() {
        const isTransparent = $('#settingsTransparentBg').is(':checked');
        const newSettings = {
            backgroundColor: isTransparent ? 'transparent' : $('#settingsBackgroundColor').val(),
            backgroundImage: $('#settingsBackgroundImage').val() || null,
            backgroundImageOpacity: parseFloat($('#settingsBackgroundOpacity').val()),
            gridSize: parseInt($('#settingsGridSize').val()),
            showGrid: $('#settingsShowGrid').is(':checked'),
            snapToGrid: $('#settingsSnapToGrid').is(':checked')
        };
        
        editor.config = { ...editor.config, ...newSettings };
        
        // Load background image if changed
        if (newSettings.backgroundImage) {
            editor.loadBackgroundImage(newSettings.backgroundImage);
        } else {
            editor.backgroundImageObj = null;
            editor.render();
        }
        
        $('#settingsModal').modal('hide');
    });

    // Widget properties event
    document.addEventListener('widget-properties', function(e) {
        showWidgetProperties(e.detail.widget);
    });

    function loadDashboard() {
        $.ajax({
            url: `/api/dashboards/${dashboardId}`,
            method: 'GET',
            success: function(dashboard) {
                currentDashboard = dashboard;
                $('#dashboardTitle').text(dashboard.name);
                editor.loadConfig(dashboard.config);
            },
            error: function(err) {
                console.error('Failed to load dashboard:', err);
                alert('Failed to load dashboard');
            }
        });
    }

    function saveDashboard() {
        const config = editor.getConfig();
        const name = $('#settingsName').val() || currentDashboard?.name || 'Unnamed Dashboard';
        const description = $('#settingsDescription').val() || currentDashboard?.description || '';

        const data = {
            name: name,
            description: description,
            config: config
        };

        if (dashboardId === 'new') {
            // Create new
            $.ajax({
                url: '/api/dashboards',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(dashboard) {
                    alert('Dashboard created successfully');
                    window.location.href = `/dashboard/editor/${dashboard.id}`;
                },
                error: function(err) {
                    console.error('Failed to create dashboard:', err);
                    alert('Failed to create dashboard');
                }
            });
        } else {
            // Update existing
            $.ajax({
                url: `/api/dashboards/${dashboardId}`,
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function() {
                    alert('Dashboard saved successfully');
                },
                error: function(err) {
                    console.error('Failed to save dashboard:', err);
                    alert('Failed to save dashboard');
                }
            });
        }
    }

    function loadSessions() {
        $.ajax({
            url: '/api/sessions',
            method: 'GET',
            success: function(sessions) {
                const select = $('#sessionSelect');
                sessions.forEach(session => {
                    select.append(`<option value="${session.sessionId}">${session.name}</option>`);
                });
                
                // Check for active session after loading all sessions
                checkActiveSession();
            }
        });
    }
    
    function checkActiveSession() {
        $.ajax({
            url: '/api/sessions/active',
            method: 'GET',
            success: function(response) {
                if (response.active && response.session) {
                    console.log('Active session detected:', response.session.name);
                    
                    // Select the active session in dropdown
                    $('#sessionSelect').val(response.session.sessionId);
                    
                    // Auto-connect to live preview
                    startLivePreview(response.session.sessionId);
                    
                    // Show notification
                    const notification = $('<div class="alert alert-success alert-dismissible fade show position-fixed" style="top: 70px; right: 20px; z-index: 9999;">')
                        .html(`<strong>Auto-connected!</strong> Receiving live data from: ${response.session.name}
                               <button type="button" class="close" data-dismiss="alert">&times;</button>`);
                    $('body').append(notification);
                    setTimeout(() => notification.alert('close'), 5000);
                    
                    // Check periodically if session is still active
                    setInterval(checkActiveSession, 30000);
                } else {
                    // Check again in 5 seconds if no active session
                    setTimeout(checkActiveSession, 5000);
                }
            },
            error: function(err) {
                console.error('Failed to check active session:', err);
            }
        });
    }

    function startLivePreview(sessionId) {
        // Disconnect previous session if any
        if (liveSession) {
            liveSession.disconnect();
        }
        
        // Connect WebSocket and update widgets in real-time
        const socket = io();
        socket.emit('join-session', sessionId);
        socket.on('sensor-data', function(data) {
            if (data.values) {
                // Update regular widgets
                Object.keys(data.values).forEach(key => {
                    const value = parseFloat(data.values[key]);
                    if (!isNaN(value)) {
                        editor.updateWidgetBySensor(key, value);
                    }
                });
                
                // Update GPS widgets if GPS data is available
                const lat = parseFloat(data.values['kff1006']);
                const lon = parseFloat(data.values['kff1005']);
                if (!isNaN(lat) && !isNaN(lon)) {
                    editor.updateGPSData({
                        lat: lat,
                        lon: lon,
                        speed: parseFloat(data.values['kff1001']) || 0,
                        bearing: parseFloat(data.values['kff123b']) || 0
                    });
                }
            }
        });
        liveSession = socket;
        $('#startLiveBtn').text('Stop Live').removeClass('btn-success').addClass('btn-danger');
        $('#startLiveBtn').off('click').click(function() {
            if (liveSession) {
                liveSession.disconnect();
                liveSession = null;
            }
            $('#startLiveBtn').text('Start Live').removeClass('btn-danger').addClass('btn-success');
            $('#startLiveBtn').off('click');
            $('#startLiveBtn').click(function() {
                startLivePreview($('#sessionSelect').val());
            });
        });
    }

    function openSettings() {
        $('#settingsName').val(currentDashboard?.name || '');
        $('#settingsDescription').val(currentDashboard?.description || '');
        
        const isTransparent = editor.config.backgroundColor === 'transparent';
        $('#settingsTransparentBg').prop('checked', isTransparent);
        $('#bgColorGroup').toggle(!isTransparent);
        $('#settingsBackgroundColor').val(isTransparent ? '#1a1a1a' : editor.config.backgroundColor);
        
        $('#settingsBackgroundImage').val(editor.config.backgroundImage || '');
        $('#settingsBackgroundOpacity').val(editor.config.backgroundImageOpacity || 1.0);
        $('#bgOpacityValue').text((editor.config.backgroundImageOpacity || 1.0).toFixed(1));
        $('#settingsGridSize').val(editor.config.gridSize);
        $('#settingsShowGrid').prop('checked', editor.config.showGrid);
        $('#settingsSnapToGrid').prop('checked', editor.config.snapToGrid);
        $('#settingsModal').modal('show');
    }
    
    // Background opacity slider
    $('#settingsBackgroundOpacity').on('input', function() {
        $('#bgOpacityValue').text(parseFloat($(this).val()).toFixed(1));
    });
    
    // Transparent background toggle
    $('#settingsTransparentBg').on('change', function() {
        const isTransparent = $(this).is(':checked');
        $('#bgColorGroup').toggle(!isTransparent);
        if (isTransparent) {
            $('#settingsBackgroundColor').val('transparent');
        }
    });

    // Upload dashboard background image
    function uploadDashboardImage() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = async function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const formData = new FormData();
            formData.append('image', file);
            
            try {
                const response = await fetch('/api/images/upload', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) throw new Error('Upload failed');
                
                const data = await response.json();
                $('#settingsBackgroundImage').val(data.url);
                
                Swal.fire({
                    icon: 'success',
                    title: 'Image uploaded!',
                    text: 'Background image uploaded successfully',
                    timer: 2000
                });
            } catch (error) {
                console.error('Upload error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Upload failed',
                    text: 'Failed to upload image. Please try again.'
                });
            }
        };
        input.click();
    }
    
    // Browse dashboard background images
    function browseDashboardImages() {
        fetch('/api/images')
            .then(res => res.json())
            .then(images => {
                const modal = $(`
                    <div class="modal fade" id="bgImageBrowserModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Select Background Image</h5>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div class="row" id="bgImageGrid"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
                
                $('body').append(modal);
                
                const grid = modal.find('#bgImageGrid');
                images.forEach(img => {
                    const item = $(`
                        <div class="col-md-3 mb-3">
                            <div class="card" style="cursor: pointer;">
                                <img src="${img.url}" class="card-img-top" style="height: 150px; object-fit: cover;">
                                <div class="card-body p-2 text-center">
                                    <small>${img.filename}</small>
                                </div>
                            </div>
                        </div>
                    `);
                    
                    item.click(function() {
                        $('#settingsBackgroundImage').val(img.url);
                        modal.modal('hide');
                    });
                    
                    grid.append(item);
                });
                
                modal.modal('show');
                modal.on('hidden.bs.modal', function() {
                    modal.remove();
                });
            })
            .catch(err => {
                console.error('Failed to load images:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to load images',
                    text: 'Please try again.'
                });
            });
    }
    
    function showWidgetProperties(widget) {
        const panel = $('#propertiesPanel');
        panel.empty();
        
        // Use new advanced UI system with tabs
        const html = createPropertiesPanel(widget);
        panel.html(html);
        
        // Setup all event handlers
        setupPropertiesHandlers(widget, editor, uploadImage, browseImages);
    }

    // Upload image function
    function uploadImage(file, callback) {
        const formData = new FormData();
        formData.append('image', file);

        $.ajax({
            url: '/api/upload-image',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            xhr: function() {
                const xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        console.log('Upload progress:', percentComplete + '%');
                    }
                }, false);
                return xhr;
            },
            success: function(response) {
                if (response.success) {
                    alert('Image uploaded successfully!');
                    callback(response.url);
                }
            },
            error: function(err) {
                console.error('Upload failed:', err);
                alert('Failed to upload image');
            }
        });
    }

    // Browse uploaded images
    function browseImages(callback) {
        $.ajax({
            url: '/api/images',
            method: 'GET',
            success: function(response) {
                if (response.images && response.images.length > 0) {
                    showImageBrowser(response.images, callback);
                } else {
                    alert('No uploaded images found. Upload an image first.');
                }
            },
            error: function(err) {
                console.error('Failed to load images:', err);
                alert('Failed to load images');
            }
        });
    }

    // Show image browser modal
    function showImageBrowser(images, callback) {
        const modal = $(`
            <div class="modal fade" id="imageBrowserModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Image</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row" id="imageGrid"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        `);

        const grid = modal.find('#imageGrid');
        images.forEach(img => {
            const col = $(`
                <div class="col-md-3 mb-3">
                    <div class="card image-card" data-url="${img.url}" style="cursor: pointer;">
                        <img src="${img.url}" class="card-img-top" style="height: 150px; object-fit: cover;">
                        <div class="card-body p-2">
                            <small class="text-muted">${img.filename}</small>
                        </div>
                    </div>
                </div>
            `);
            grid.append(col);
        });

        modal.find('.image-card').click(function() {
            const url = $(this).data('url');
            callback(url);
            modal.modal('hide');
        });

        $('body').append(modal);
        modal.modal('show');
        modal.on('hidden.bs.modal', function() {
            $(this).remove();
        });
    }
});
</script>

<style>
body {
    overflow: hidden;
}

.canvas-container {
    position: relative;
}

#dashboardCanvas {
    border: 2px solid #333;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
}

.widget-palette button {
    text-align: left;
}

/* Canvas scroll area with visible scrollbars */
.canvas-scroll-wrapper {
    background: #2a2a2a;
    position: relative;
    overflow: hidden;
}

.canvas-scrollable {
    width: 100%;
    height: calc(100vh - 60px);
    overflow: auto;
    position: relative;
    /* Force scrollbars to always be visible */
    scrollbar-width: thin;
    scrollbar-color: #666 #2a2a2a;
}

/* Webkit scrollbars (Chrome, Safari, Edge) */
.canvas-scrollable::-webkit-scrollbar {
    width: 12px;
    height: 12px;
}

.canvas-scrollable::-webkit-scrollbar-track {
    background: #2a2a2a;
    border: 1px solid #444;
}

.canvas-scrollable::-webkit-scrollbar-thumb {
    background: #666;
    border-radius: 6px;
    border: 2px solid #2a2a2a;
}

.canvas-scrollable::-webkit-scrollbar-thumb:hover {
    background: #888;
}

.canvas-scrollable::-webkit-scrollbar-corner {
    background: #2a2a2a;
}

.canvas-container {
    display: inline-block;
    position: relative;
    padding: 20px;
}
</style>

</div><!-- /.row -->
</div><!-- /.container-fluid -->

<!-- jQuery -->
<script src="/js/lib/jquery-3.3.1.min.js"></script>
<!-- Bootstrap -->
<script src="/js/lib/bootstrap.bundle.min.js"></script>
<!-- Socket.IO -->
<script src="/socket.io/socket.io.js"></script>
<!-- Leaflet for GPS Map Widget -->
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<!-- Dashboard Widgets -->
<script src="/js/widgets.js"></script>
<!-- Dashboard Editor -->
<script src="/js/dashboard-editor.js"></script>
<!-- Widget Properties UI -->
<script src="/js/widget-properties-ui.js"></script>
<!-- Widget Properties Handlers -->
<script src="/js/widget-properties-handlers.js"></script>

</body>
</html>

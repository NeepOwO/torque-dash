<div class="container-fluid">
    <div class="row">
        <!-- Toolbar -->
        <div class="col-12 bg-dark text-white py-2">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <a href="/dashboards" class="btn btn-sm btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back
                    </a>
                    <span class="mx-3" id="dashboardTitle">Dashboard Editor</span>
                </div>
                <div>
                    <button id="saveBtn" class="btn btn-sm btn-success">
                        <i class="fas fa-save"></i> Save
                    </button>
                    <button id="previewBtn" class="btn btn-sm btn-info">
                        <i class="fas fa-eye"></i> Preview
                    </button>
                    <button id="settingsBtn" class="btn btn-sm btn-warning">
                        <i class="fas fa-cog"></i> Settings
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="height: calc(100vh - 60px);">
        <!-- Widget Panel -->
        <div class="col-md-2 bg-light border-right p-3" style="overflow-y: auto;">
            <h6>Widgets</h6>
            <div class="widget-palette">
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="speedometer">
                    <i class="fas fa-tachometer-alt"></i> Speedometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="tachometer">
                    <i class="fas fa-tachometer-alt"></i> Tachometer
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="circular-gauge">
                    <i class="fas fa-circle-notch"></i> Circular Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="linear-gauge">
                    <i class="fas fa-sliders-h"></i> Linear Gauge
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="temperature">
                    <i class="fas fa-thermometer-half"></i> Temperature
                </button>
                <button class="btn btn-block btn-sm btn-outline-primary mb-2" data-widget="digital-display">
                    <i class="fas fa-digital-tachograph"></i> Digital Display
                </button>
                <button class="btn btn-block btn-sm btn-outline-warning mb-2" data-widget="indicator-light">
                    <i class="fas fa-lightbulb"></i> Indicator Light
                </button>
                <button class="btn btn-block btn-sm btn-outline-success mb-2" data-widget="gps-map">
                    <i class="fas fa-map-marked-alt"></i> GPS Map
                </button>
            </div>

            <hr>

            <h6 class="mt-3">Sessions</h6>
            <select id="sessionSelect" class="form-control form-control-sm">
                <option value="">Select session...</option>
            </select>
            <button id="startLiveBtn" class="btn btn-block btn-sm btn-success mt-2" disabled>
                <i class="fas fa-play"></i> Start Live
            </button>
        </div>

        <!-- Canvas Area -->
        <div class="col-md-7 p-0" style="overflow: auto; background: #2a2a2a;">
            <div class="canvas-container" style="display: inline-block;">
                <canvas id="dashboardCanvas"></canvas>
            </div>
        </div>

        <!-- Properties Panel -->
        <div class="col-md-3 bg-light border-left p-3" style="overflow-y: scroll; max-height: calc(100vh - 60px);">
            <h6 class="sticky-top bg-light pb-2 mb-2 border-bottom">Properties</h6>
            <div id="propertiesPanel" style="overflow-y: auto;">
                <p class="text-muted">Select a widget to edit properties</p>
            </div>
        </div>
    </div>
</div>

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Dashboard Settings</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="form-control" id="settingsName">
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea class="form-control" id="settingsDescription" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>Background Color</label>
                    <input type="color" class="form-control" id="settingsBackgroundColor">
                </div>
                <div class="form-group">
                    <label>Grid Size</label>
                    <input type="number" class="form-control" id="settingsGridSize" min="10" max="50">
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsShowGrid">
                    <label class="form-check-label" for="settingsShowGrid">Show Grid</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="settingsSnapToGrid">
                    <label class="form-check-label" for="settingsSnapToGrid">Snap to Grid</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSettings">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="/js/lib/jquery-3.3.1.min.js"></script>
<script src="/js/lib/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js" integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg==" crossorigin=""></script>
<script src="/js/widgets.js"></script>
<script src="/js/dashboard-editor.js"></script>
<script src="/js/widget-properties-ui.js"></script>
<script src="/js/widget-properties-handlers.js"></script>

<script>
const dashboardId = '{{dashboardId}}';
let editor;
let currentDashboard = null;
let liveSession = null;

$(document).ready(function() {
    // Initialize editor
    editor = new DashboardEditor('dashboardCanvas', {
        showGrid: true,
        snapToGrid: true
    });

    // Load dashboard if editing existing
    if (dashboardId !== 'new') {
        loadDashboard();
    }

    // Load sessions list
    loadSessions();

    // Widget palette
    $('.widget-palette button').click(function() {
        const widgetType = $(this).data('widget');
        editor.addWidget(widgetType);
    });

    // Save button
    $('#saveBtn').click(function() {
        saveDashboard();
    });

    // Settings button
    $('#settingsBtn').click(function() {
        openSettings();
    });

    // Preview button
    $('#previewBtn').click(function() {
        if (dashboardId !== 'new') {
            window.open(`/dashboard/view/${dashboardId}`, '_blank');
        } else {
            alert('Please save the dashboard first');
        }
    });

    // Session select
    $('#sessionSelect').change(function() {
        const sessionId = $(this).val();
        $('#startLiveBtn').prop('disabled', !sessionId);
    });

    // Start live button
    $('#startLiveBtn').click(function() {
        const sessionId = $('#sessionSelect').val();
        if (sessionId) {
            startLivePreview(sessionId);
        }
    });

    // Save settings
    $('#saveSettings').click(function() {
        const newSettings = {
            backgroundColor: $('#settingsBackgroundColor').val(),
            gridSize: parseInt($('#settingsGridSize').val()),
            showGrid: $('#settingsShowGrid').is(':checked'),
            snapToGrid: $('#settingsSnapToGrid').is(':checked')
        };
        
        editor.config = { ...editor.config, ...newSettings };
        editor.render();
        $('#settingsModal').modal('hide');
    });

    // Widget properties event
    document.addEventListener('widget-properties', function(e) {
        showWidgetProperties(e.detail.widget);
    });

    function loadDashboard() {
        $.ajax({
            url: `/api/dashboards/${dashboardId}`,
            method: 'GET',
            success: function(dashboard) {
                currentDashboard = dashboard;
                $('#dashboardTitle').text(dashboard.name);
                editor.loadConfig(dashboard.config);
            },
            error: function(err) {
                console.error('Failed to load dashboard:', err);
                alert('Failed to load dashboard');
            }
        });
    }

    function saveDashboard() {
        const config = editor.getConfig();
        const name = $('#settingsName').val() || currentDashboard?.name || 'Unnamed Dashboard';
        const description = $('#settingsDescription').val() || currentDashboard?.description || '';

        const data = {
            name: name,
            description: description,
            config: config
        };

        if (dashboardId === 'new') {
            // Create new
            $.ajax({
                url: '/api/dashboards',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(dashboard) {
                    alert('Dashboard created successfully');
                    window.location.href = `/dashboard/editor/${dashboard.id}`;
                },
                error: function(err) {
                    console.error('Failed to create dashboard:', err);
                    alert('Failed to create dashboard');
                }
            });
        } else {
            // Update existing
            $.ajax({
                url: `/api/dashboards/${dashboardId}`,
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function() {
                    alert('Dashboard saved successfully');
                },
                error: function(err) {
                    console.error('Failed to save dashboard:', err);
                    alert('Failed to save dashboard');
                }
            });
        }
    }

    function loadSessions() {
        $.ajax({
            url: '/api/sessions',
            method: 'GET',
            success: function(sessions) {
                const select = $('#sessionSelect');
                sessions.forEach(session => {
                    select.append(`<option value="${session.sessionId}">${session.name}</option>`);
                });
                
                // Check for active session after loading all sessions
                checkActiveSession();
            }
        });
    }
    
    function checkActiveSession() {
        $.ajax({
            url: '/api/sessions/active',
            method: 'GET',
            success: function(response) {
                if (response.active && response.session) {
                    console.log('Active session detected:', response.session.name);
                    
                    // Select the active session in dropdown
                    $('#sessionSelect').val(response.session.sessionId);
                    
                    // Auto-connect to live preview
                    startLivePreview(response.session.sessionId);
                    
                    // Show notification
                    const notification = $('<div class="alert alert-success alert-dismissible fade show position-fixed" style="top: 70px; right: 20px; z-index: 9999;">')
                        .html(`<strong>Auto-connected!</strong> Receiving live data from: ${response.session.name}
                               <button type="button" class="close" data-dismiss="alert">&times;</button>`);
                    $('body').append(notification);
                    setTimeout(() => notification.alert('close'), 5000);
                    
                    // Check periodically if session is still active
                    setInterval(checkActiveSession, 30000);
                } else {
                    // Check again in 5 seconds if no active session
                    setTimeout(checkActiveSession, 5000);
                }
            },
            error: function(err) {
                console.error('Failed to check active session:', err);
            }
        });
    }

    function startLivePreview(sessionId) {
        // Disconnect previous session if any
        if (liveSession) {
            liveSession.disconnect();
        }
        
        // Connect WebSocket and update widgets in real-time
        const socket = io();
        socket.emit('join-session', sessionId);
        socket.on('sensor-data', function(data) {
            if (data.values) {
                // Update regular widgets
                Object.keys(data.values).forEach(key => {
                    const value = parseFloat(data.values[key]);
                    if (!isNaN(value)) {
                        editor.updateWidgetBySensor(key, value);
                    }
                });
                
                // Update GPS widgets if GPS data is available
                const lat = parseFloat(data.values['kff1006']);
                const lon = parseFloat(data.values['kff1005']);
                if (!isNaN(lat) && !isNaN(lon)) {
                    editor.updateGPSData({
                        lat: lat,
                        lon: lon,
                        speed: parseFloat(data.values['kff1001']) || 0,
                        bearing: parseFloat(data.values['kff123b']) || 0
                    });
                }
            }
        });
        liveSession = socket;
        $('#startLiveBtn').text('Stop Live').removeClass('btn-success').addClass('btn-danger');
        $('#startLiveBtn').off('click').click(function() {
            if (liveSession) {
                liveSession.disconnect();
                liveSession = null;
            }
            $('#startLiveBtn').text('Start Live').removeClass('btn-danger').addClass('btn-success');
            $('#startLiveBtn').off('click');
            $('#startLiveBtn').click(function() {
                startLivePreview($('#sessionSelect').val());
            });
        });
    }

    function openSettings() {
        $('#settingsName').val(currentDashboard?.name || '');
        $('#settingsDescription').val(currentDashboard?.description || '');
        $('#settingsBackgroundColor').val(editor.config.backgroundColor);
        $('#settingsGridSize').val(editor.config.gridSize);
        $('#settingsShowGrid').prop('checked', editor.config.showGrid);
        $('#settingsSnapToGrid').prop('checked', editor.config.snapToGrid);
        $('#settingsModal').modal('show');
    }

    function showWidgetProperties(widget) {
        const panel = $('#propertiesPanel');
        panel.empty();
        
        // Use new advanced UI system with tabs
        const html = createPropertiesPanel(widget);
        panel.html(html);
        
        // Setup all event handlers
        setupPropertiesHandlers(widget, editor, uploadImage, browseImages);
    }

    // Upload image function
    function uploadImage(file, callback) {
        const formData = new FormData();
        formData.append('image', file);

        $.ajax({
            url: '/api/upload-image',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            xhr: function() {
                const xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        console.log('Upload progress:', percentComplete + '%');
                    }
                }, false);
                return xhr;
            },
            success: function(response) {
                if (response.success) {
                    alert('Image uploaded successfully!');
                    callback(response.url);
                }
            },
            error: function(err) {
                console.error('Upload failed:', err);
                alert('Failed to upload image');
            }
        });
    }

    // Browse uploaded images
    function browseImages(callback) {
        $.ajax({
            url: '/api/images',
            method: 'GET',
            success: function(response) {
                if (response.images && response.images.length > 0) {
                    showImageBrowser(response.images, callback);
                } else {
                    alert('No uploaded images found. Upload an image first.');
                }
            },
            error: function(err) {
                console.error('Failed to load images:', err);
                alert('Failed to load images');
            }
        });
    }

    // Show image browser modal
    function showImageBrowser(images, callback) {
        const modal = $(`
            <div class="modal fade" id="imageBrowserModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Image</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row" id="imageGrid"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        `);

        const grid = modal.find('#imageGrid');
        images.forEach(img => {
            const col = $(`
                <div class="col-md-3 mb-3">
                    <div class="card image-card" data-url="${img.url}" style="cursor: pointer;">
                        <img src="${img.url}" class="card-img-top" style="height: 150px; object-fit: cover;">
                        <div class="card-body p-2">
                            <small class="text-muted">${img.filename}</small>
                        </div>
                    </div>
                </div>
            `);
            grid.append(col);
        });

        modal.find('.image-card').click(function() {
            const url = $(this).data('url');
            callback(url);
            modal.modal('hide');
        });

        $('body').append(modal);
        modal.modal('show');
        modal.on('hidden.bs.modal', function() {
            $(this).remove();
        });
    }
});
</script>

<style>
body {
    overflow: hidden;
}

.canvas-container {
    position: relative;
}

#dashboardCanvas {
    border: 2px solid #333;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
}

.widget-palette button {
    text-align: left;
}
</style>

